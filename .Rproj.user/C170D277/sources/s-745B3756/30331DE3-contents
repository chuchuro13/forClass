---
title: "try"
output: html_document
---

```{r}
x <- c("a", "z", "g")
as_factor(x)
as.factor(x)

a<-c("090","091","092","093","094","095","096","097","098","099","100","101","102","103","104","105","106","107")
as.Year(a()) + 1911
```

```{r}
library(readr)
student <- read_csv("https://raw.githubusercontent.com/tpemartin/course-107-1-programming-for-data-science/master/data/student.csv")
library(dplyr)
library(magrittr)
student %<>% mutate(
  身高級距=cut(身高,c(0,150,155,160,165,170,175,180,185,200)))
factor(student$身高級距,
       levels=c("(0,150]","(150,155]", "(155,160]", "(160,165]" ,"(165,170]", "(170,175]" ,"(175,180]" ,"(180,185]", "(185,200]"),
       ordered=TRUE) -> student$身高級距
```
```{r}
library(readr)
bankdata <- read_csv("https://raw.githubusercontent.com/tpemartin/github-data/master/bankdata.csv")
library(stringr)
x <- str_replace(bankdata$年月, "/" , ".")
library(base)
y <- as.numeric(x)
z <- y + 1911.00
r <- as.character(z)
s <- str_replace_all(r, "[.]" , "/")
```

```{r}
library(base)
y <- as.integer(x)
( y + 191100)
y <- str_replace(y," ","/")
```

```{r}
library(dplyr)
library(lubridate)
a <- ymd("2017-01-31") 
b <- ymd_hms("2017-01-31 20:11:59")
```

```{r}
library(readr)
student <- read_csv("https://raw.githubusercontent.com/tpemartin/course-107-1-programming-for-data-science/master/data/student.csv")
library(dplyr)
library(magrittr)
student %<>% mutate(
  身高級距=cut(身高,c(0,150,155,160,165,170,175,180,185,200)))
as.factor(student$出生地) -> student$出生地
```

```{r}
fruits <- c(
  "apples and oranges and pears and bananas",
  "pineapples and mangos and guavas"
)

str_split(fruits, " and ")

```

```{r}
str_c(letters,LETTERS)
str_c(letters,LETTERS,sep="-")
str_c("lowercase: ", letters, ", capital: ", LETTERS)
```

```{r}
shopping_list <- c("apples x4", "bag of flour", "bag of sugar", "milk x2")
str_extract_all(shopping_list, "\\b[a-z]+\\b")
```

```{r}
fruit <- c("apple", "pear", "banana")
str_dup(fruit, 2)
str_dup(fruit, 1:3)
str_c("ba", str_dup("na", 0:5))
```

```{r}
fruits <- c(
  "apples and oranges and pears and bananas",
  "pineapples and mangos and guavas"
)

str_split(fruits, " and ")
str_split(fruits, " and ", simplify = TRUE)

# Specify n to restrict the number of possible matches
str_split(fruits, " and ", n = 3)
str_split(fruits, " and ", n = 2)
# If n greater than number of pieces, no padding occurs
str_split(fruits, " and ", n = 5)

# Use fixed to return a character matrix
str_split_fixed(fruits, " and ", 3)
str_split_fixed(fruits, " and ", 4)
```

```{r}
x <- 1:12 ; dim(x) <- c(3,4)
x
```

```{r}
x2 <- 583.667695
round(x2, 0)

```

```{r}
c(1,7:9)
c(1:5, 10.5, "next")
```

```{r}
ll <- list(A = 1, c = "C")
## do *not* use
c(ll, d = 1:3) # which is == c(ll, as.list(c(d = 1:3)))
## but rather
c(ll, d = list(1:3))  # c() combining two lists

c(list(A = c(B = 1)), recursive = TRUE)

c(options(), recursive = TRUE)
c(list(A = c(B = 1, C = 2), B = c(E = 7)), recursive = TRUE)
```

```{r}
fruit <- c("apple", "banana", "pear", "pinapple")
str_subset(fruit, "a")
str_which(fruit, "a")
str_subset(fruit, "[aeiou]")
```

